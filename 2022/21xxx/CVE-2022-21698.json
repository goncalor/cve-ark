{
	"cve": {
		"data_type": "CVE",
		"data_format": "MITRE",
		"data_version": "4.0",
		"CVE_data_meta": {
			"ID": "CVE-2022-21698",
			"ASSIGNER": "security-advisories@github.com"
		},
		"problemtype": {
			"problemtype_data": [
				{
					"description": [
						{
							"lang": "en",
							"value": "CWE-400"
						}
					]
				}
			]
		},
		"references": {
			"reference_data": [
				{
					"url": "https://github.com/prometheus/client_golang/pull/962",
					"name": "https://github.com/prometheus/client_golang/pull/962",
					"refsource": "MISC",
					"tags": []
				},
				{
					"url": "https://github.com/prometheus/client_golang/releases/tag/v1.11.1",
					"name": "https://github.com/prometheus/client_golang/releases/tag/v1.11.1",
					"refsource": "MISC",
					"tags": []
				},
				{
					"url": "https://github.com/prometheus/client_golang/security/advisories/GHSA-cg3q-j54f-5p7p",
					"name": "https://github.com/prometheus/client_golang/security/advisories/GHSA-cg3q-j54f-5p7p",
					"refsource": "CONFIRM",
					"tags": []
				},
				{
					"url": "https://github.com/prometheus/client_golang/pull/987",
					"name": "https://github.com/prometheus/client_golang/pull/987",
					"refsource": "MISC",
					"tags": []
				}
			]
		},
		"description": {
			"description_data": [
				{
					"lang": "en",
					"value": "client_golang is the instrumentation library for Go applications in Prometheus, and the promhttp package in client_golang provides tooling around HTTP servers and clients. In client_golang prior to version 1.11.1, HTTP server is susceptible to a Denial of Service through unbounded cardinality, and potential memory exhaustion, when handling requests with non-standard HTTP methods. In order to be affected, an instrumented software must use any of `promhttp.InstrumentHandler*` middleware except `RequestsInFlight`; not filter any specific methods (e.g GET) before middleware; pass metric with `method` label name to our middleware; and not have any firewall/LB/proxy that filters away requests with unknown `method`. client_golang version 1.11.1 contains a patch for this issue. Several workarounds are available, including removing the `method` label name from counter/gauge used in the InstrumentHandler; turning off affected promhttp handlers; adding custom middleware before promhttp handler that will sanitize the request method given by Go http.Request; and using a reverse proxy or web application firewall, configured to only allow a limited set of methods."
				}
			]
		}
	},
	"configurations": {
		"CVE_data_version": "4.0",
		"nodes": []
	},
	"impact": {},
	"publishedDate": "2022-02-15T16:15Z",
	"lastModifiedDate": "2022-02-15T16:15Z"
}