{
	"cve": {
		"data_type": "CVE",
		"data_format": "MITRE",
		"data_version": "4.0",
		"CVE_data_meta": {
			"ID": "CVE-2022-29219",
			"ASSIGNER": "security-advisories@github.com"
		},
		"problemtype": {
			"problemtype_data": [
				{
					"description": [
						{
							"lang": "en",
							"value": "CWE-190"
						}
					]
				}
			]
		},
		"references": {
			"reference_data": [
				{
					"url": "https://github.com/ChainSafe/lodestar/security/advisories/GHSA-cvj7-5f3c-9vg9",
					"name": "https://github.com/ChainSafe/lodestar/security/advisories/GHSA-cvj7-5f3c-9vg9",
					"refsource": "CONFIRM",
					"tags": []
				},
				{
					"url": "https://github.com/ChainSafe/lodestar/releases/tag/v0.36.0",
					"name": "https://github.com/ChainSafe/lodestar/releases/tag/v0.36.0",
					"refsource": "MISC",
					"tags": []
				},
				{
					"url": "https://github.com/ChainSafe/lodestar/pull/3977",
					"name": "https://github.com/ChainSafe/lodestar/pull/3977",
					"refsource": "MISC",
					"tags": []
				}
			]
		},
		"description": {
			"description_data": [
				{
					"lang": "en",
					"value": "Lodestar is a TypeScript implementation of the Ethereum Consensus specification. Prior to version 0.36.0, there is a possible consensus split given maliciously-crafted `AttesterSlashing` or `ProposerSlashing` being included on-chain. Because the developers represent `uint64` values as native javascript `number`s, there is an issue when those variables with large (greater than 2^53) `uint64` values are included on chain. In those cases, Lodestar may view valid_`AttesterSlashing` or `ProposerSlashing` as invalid, due to rounding errors in large `number` values. This causes a consensus split, where Lodestar nodes are forked away from the main network. Similarly, Lodestar may consider invalid `ProposerSlashing` as valid, thus including in proposed blocks that will be considered invalid by the network. Version 0.36.0 contains a fix for this issue. As a workaround, use `BigInt` to represent `Slot` and `Epoch` values in `AttesterSlashing` and `ProposerSlashing` objects. `BigInt` is too slow to be used in all `Slot` and `Epoch` cases, so one may carefully use `BigInt` just where necessary for consensus."
				}
			]
		}
	},
	"configurations": {
		"CVE_data_version": "4.0",
		"nodes": []
	},
	"impact": {},
	"publishedDate": "2022-05-24T15:15Z",
	"lastModifiedDate": "2022-05-24T15:23Z"
}